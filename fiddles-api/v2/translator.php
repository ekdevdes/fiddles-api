<?php

include_once '../../libs/phphaml/library.php';
include_once '../../libs/coffeescript-php/src/CoffeeScript/Init.php';
include_once '../../libs/lessphp/lessc.inc.php';
require_once '../../libs/scss.inc.php';
include_once '../../libs/php-markdown/markdown.php';


class Translator{

	public static function minify_css($css) {
		$css = preg_replace( '#\s+#', ' ', $css );
		$css = preg_replace( '#/\*.*?\*/#s', '', $css );
		$css = str_replace( '; ', ';', $css );
		$css = str_replace( ': ', ':', $css );
		$css = str_replace( ' {', '{', $css );
		$css = str_replace( '{ ', '{', $css );
		$css = str_replace( ', ', ',', $css );
		$css = str_replace( '} ', '}', $css );
		$css = str_replace( ';}', '}', $css );

		return trim($css);
	}

	public static function translate($options){

		// required
			// $options['from']
			// $options['to']
			// $options['text']

		// returns an 'err' array if translation not supported

		if($options['from'] == "markdown" && $options['to'] == 'html'){


			return trim(markdown($options['text']));


		}else if($options['from'] == "haml" && $options['to'] == 'html'){


			phphaml\Library::autoload();
			$parser = new phphaml\haml\Parser($options["text"]);

			try{

				return trim($parser->render());

			}catch(Exception $e){

				$errMsg = $e->getMessage();
				$message = ucfirst(str_replace("Parse error: ", "", $errMsg));

				return ["err" => ["code" => 511,"msg" => $message]];

			}


		}else if($options['from'] == 'sass' && $options['to'] == 'css'){

				$scss = new scssc();

				try{
					$code = $scss->compile($options["text"]);

					return $code;
				}catch (Exception $e){
					$errorMsg = $e->getMessage();
					$message = ucfirst(str_replace("line:", "on line ", $errorMsg));

					return ["err" => ["code" => 509,"msg" => $message]];
				}

		}else if($options['from'] == 'less' && $options['to'] == 'css'){

			$less = new lessc;

			try{
				return $less->compile($options["text"]);
			}catch(Exception $e){
				$errMsg = $e->getMessage();
				$message = str_replace("parse error: ", "", $errMsg);
				$better_msg = ucfirst(str_replace("./", " in ", $message));

				return json_encode(["err" => ["code" => 510,"msg" => $better_msg]]);
			}

		}else if($options['from'] == 'coffeescript' && $options['to'] == 'js'){

			CoffeeScript\Init::load();

			try{
				$file = "/* Made with Fiddles for iOS */\n".$options["text"];
				$js = CoffeeScript\Compiler::compile($file, []);
				$return = trim(str_ireplace("// Generated by CoffeeScript PHP 1.3.1\n", "", $js));

				return $return;
			}catch (Exception $e){
				$errMsg = $e->getMessage();
				$message = ucfirst(str_replace("In , ", "", $errMsg));

				return ["err" => ["code" => 507,"msg" => $message]];
			}




		}else{
			return array('err' => array('msg' =>'translation not supported', 'code' => 502));
		}

	}

};